<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utilities</name>
    </assembly>
    <members>
        <member name="T:Microsoft.HWSW.Test.Utilities.Arduino">
            <summary>
            Class which allows interface to Arduino hardware.
            This will send commands to the DUT through the Arduino and wait for responses
            when appropriate.
            This will open and close the connection to the Arduino COM port each time an interaction
            is requested.
            Possible Arduino hardware configurations:
                Power button
                    connected to yellow connectors
                Power supply
                    connected to blue connectors
                Accessory control
                    connected to white connectors.
                Docking Station Power control
                    connected to grey connectors.
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.Arduino.ConnectorPinBlue">
            <summary>
            Pins mapped to each connector color on the Arduino for connectors using switches
            Note: red/black uses fet pin number
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.#ctor(System.Int32)">
            <summary>
            Constructor for this class 
            </summary>
            <param name="comPortToUse">COM port associated with the Arduino or 0 to auto detect</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.Arduino.RelaySelection">
            <summary>
            Relay selection for input into batch command
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.BatchCommand(System.Int32,System.Object[])">
            <summary>
            Build a batch command based on the requested values and send it to the arduino.
            Arguments are expected to come in groups of 3:
                RelaySelection: which relay to use
                bool: whether the relay should be high or low, true for high
                int: delay in ms before relay state is changed
            </summary>
            <param name="initialDelayMs">initial delay before the command is to start</param>
            <param name="args">arguments indicating which relays to change for this command</param>
            <returns>the string built</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.Arduino.eOperation">
            <summary>
            Type of operation to do.
            </summary>
            <seealso cref="M:Microsoft.HWSW.Test.Utilities.Arduino.SendCommand(Microsoft.HWSW.Test.Utilities.Arduino.eOperation,System.Boolean@)"/>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.SendCommand(Microsoft.HWSW.Test.Utilities.Arduino.eOperation,System.Boolean@)">
            <summary>
            Send command via Arduino.  Return result from command.
            </summary>
            <param name="operation">Indicates which command is sent</param>
            <param name="returnResult">true if pass received, false if fail</param>
            <returns>true if communications successful</returns>
            <remarks>These commands need software running on the DUT that understands the command
            and can respond accordingly.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.AccessoryConnectDisconnect(System.Boolean)">
            <summary>
            Connect or disconnect the accessory plugged into the white connector.
            </summary>
            <param name="connect">true to connect. false to disconnect</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.DockConnectDisconnect(System.Boolean)">
            <summary>
            Connect or disconnect the dock power plugged into the grey connector.
            </summary>
            <param name="connect">true to turn on, false to turn off</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.BlueConnectDisconnect(System.Boolean)">
            <summary>
            Connect or disconnect the item attached to the blue port
            </summary>
            <param name="connect">true to connect. false to disconnect</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.YellowConnectDisconnect(System.Boolean)">
            <summary>
            Connect or disconnect the item attached to the yellow port
            </summary>
            <param name="connect">true to connect. false to disconnect</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.WhiteConnectDisconnect(System.Boolean)">
            <summary>
            Connect or disconnect the item attached to the white port
            </summary>
            <param name="connect">true to connect. false to disconnect</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.GreyConnectDisconnect(System.Boolean)">
            <summary>
            Connect or disconnect the item attached to the grey port
            </summary>
            <param name="connect">true to connect. false to disconnect</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerSupplyConnectDisconnect(System.Boolean)">
            <summary>
            Connect or disconnect the power supply
            </summary>
            <param name="connect">true for connect, false for disconnect</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonPress(System.Int32,System.Int32)">
            <summary>
            Press the power button for the indicated period of time.
            </summary>
            <param name="timeMs">time to press the power button in ms.</param>
            <param name="pinNo">pin number corresponding to the FET being used.  default is FET 4 (26)</param>
            <remarks>Default is to use the Red/Black power button connectors.
            This needs to be setup to use the blue connectors if desired prior
            to calling this method.  RedBlackConnector = true/false </remarks>
            <seealso cref="M:Microsoft.HWSW.Test.Utilities.Arduino.MapChannelLetterToFetPin(System.Char)"/>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonConnectDisconnect(System.Boolean,System.Int32)">
            <summary>
            Press the power button for the indicated period of time.
            </summary>
            <param name="push">true to press the button, false to release</param>
            <param name="pinNo">Pin number for FET to use.  Default is FET 4 (26)</param>
            <remarks>Default is to use the Red/Black power button connectors.
            This needs to be setup to use the yellow connectors if desired prior
            to calling this method.  RedBlackConnector = true/false </remarks>
            <seealso cref="M:Microsoft.HWSW.Test.Utilities.Arduino.MapChannelLetterToFetPin(System.Char)"/>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.Arduino.redBlackConnector">
            <summary>
            Indicates whether we're using the red/black or yellow connectors for the power button.
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Arduino.RedBlackConnector">
            <summary>
            Accessor used to indicate whether we're using the red/black or yellow connector for power control.
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonControl">
            <summary>
            Base class used for power button controls.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonControl.PushButton(System.Int32)">
            <summary>
            Press the power button for the indicated time.
            </summary>
            <param name="timeMs"></param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonControl.PowerButtonConnectDisconnect(System.Boolean)">
            <summary>
            Press or release the power button.
            </summary>
            <param name="press">true to press, false to release</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonControlRedBlack.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="arduinoComPort">com port to use for arduino</param>
            <param name="pinNo">FET pin number being used, default is FET 4 (26)</param>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonControlRedBlack.fetPinNo">
            <summary>
            FET pin number.  This is needed by red/black connector controls.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonControlRedBlack.PushButton(System.Int32)">
            <summary>
            Press the power button for a given period of time.  This is not optimal for
            times under 40 ms and the time actually pressed will be +- 40 ms of the time given.
            </summary>
            <param name="timeMs">time to press the button</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonControlRedBlack.PowerButtonConnectDisconnect(System.Boolean)">
            <summary>
            Power button press or release control using power button (red/black) connectors
            on the Arduino
            </summary>
            <param name="press">true for press, false for release</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.MapChannelLetterToFetPin(System.Char)">
            <summary>
            Map FET switch data channel selection to the data pin associated with it
            </summary>
            <param name="dataChannelLetter">User-friendly channel identification</param>
            <returns>Arduino data pin number</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.MapPinToArduinoString(System.Int32,System.String@)">
            <summary>
            
            </summary>
            <param name="ArduinoPint"></param>
            <param name="SerialCommandPrefix"></param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonControlYellow.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="arduinoComPort">com port to use for arduino</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonControlYellow.PushButton(System.Int32)">
            <summary>
            Press the power button for a given period of time.
            This works with the power button controls connected to the blue arduino ports.
            Red plug is still on top.
            </summary>
            <param name="timeMs">Time to press the button in ms.  This must be at least 7.</param>
            <remarks>This offers a more precise button press time if this is needed as
            the delay used is moved to the Arduino.</remarks>
            <remarks>This requires an Arduino with the T command enabled.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.PowerButtonControlYellow.PowerButtonConnectDisconnect(System.Boolean)">
            <summary>
            Power button press or release control using yellow connectors
            on the Arduino
            </summary>
            <param name="press">true for press, false for release</param>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Arduino.ComPort">
            <summary>
            Accessors for the ComPort being used.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.FindComPort">
            <summary>
            This will find the com port for the first encountered Arduino device.  If there
            is more than one, this will return the port for the first device found.
            </summary>
            <returns>com port found or 0</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.GetCommandString(Microsoft.HWSW.Test.Utilities.Arduino.eOperation)">
            <summary>
            Map operation to the command string to be sent over the Arduino.
            </summary>
            <param name="operation">the operation to be mapped</param>
            <returns>command string found or string.Empty</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Arduino.ConnectDisconnect(System.Boolean,System.Int32)">
            <summary>
            Connect or disconnect the item connected to the given arduino pin
            </summary>
            <param name="connect">true to connect.  false to disconnect</param>
            <param name="pinNo">Arduino pin number</param>
            <returns>true if successful</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.QuickPowerSupplyControl">
            <summary>
            This allow for a quick disruption in power supply output if this is desired.
            </summary>
            <remarks>It was found that doing a delay between sending commands via serial ports does
            not produce a controllable delay.  Because of this, delay functionality has been moved
            to the Arduino software and a T command was added.</remarks>
            <remarks>Minimum delay is 7 ms.  This is the quickest the hardware can press the button
            with the current configuration.</remarks>
            <remarks>IO pin is hard-coded to 4 for this operation.</remarks>
            <remarks>This requires updated Arduino software with T command addition.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickPowerSupplyControl.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="comPort">COM Port to use for Arduino communications</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickPowerSupplyControl.PushButton(System.Int32)">
            <summary>
            Press the power button for the indicated length of time.
            </summary>
            <param name="msec">Time to press the button in ms.  This must be 7 or greater.</param>
            <remarks>This will throw if the msec value is too low.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickPowerSupplyControl.TurnPowerOff(System.Int32)">
            <summary>
            Turn power supply off for the indicated length of time.
            </summary>
            <param name="msec">Time to turn the power off in ms.  This must be 7 or greater.</param>
            <remarks>This will throw if the msec value is too low.</remarks>
            <remarks>This assumes the power supply is attached to the blue arduino connectors.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickPowerSupplyControl.TimedConnectDisconnect(System.Int32)">
            <summary>
            Connect for a given time, then disconnect.
            If we are connected to the power button, this is a timed button press.
            </summary>
            <param name="msec">Time to connect in ms.  This should be 7 or greater due to
            hardware restrictions.</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickPowerSupplyControl.TimedDisconnectConnect(System.Int32)">
            <summary>
            Disconnect for a given time then connect.
            </summary>
            <param name="msec">Time to disconnect in ms.  This should be 7 or greater due to
            hardware restrictions.</param>
            <remarks>This should not be used when the power button is connected to the power port.
            It will leave the power button in an on state.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickPowerSupplyControl.DoWork">
            <summary>
            Send a command to the arduino to turn the power button on and off with an arduino delay in
            the middle.
            This will send 3 commands at once to the arduino:
                push power button
                delay for x ms
                release power button
            There is a 4 ms overhead for these operations to take place.  The software will take this
            overhead into account when determining the delay value to send to the arduino.
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.QuickAccessoryControl">
            <summary>
            Class to facilitate power button push via yellow control ports.
            </summary>
            <remarks>It was found that doing a delay between sending commands via serial ports does
            not produce a controllable delay.  Because of this, delay functionality has been moved
            to the Arduino software and a T command was added.</remarks>
            <remarks>Minimum delay is 7 ms.  This is the quickest the hardware can press the button
            with the current configuration.</remarks>
            <remarks>For power button presses, this works with the power button plugged into the power ports
            on the automation box.  These are the blue ports.</remarks>
            <remarks>This requires Arduino software with T command addition.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickAccessoryControl.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="comPort">COM Port to use for Arduino communications</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickAccessoryControl.PushButton(System.Int32)">
            <summary>
            Press the power button for the indicated length of time.
            </summary>
            <param name="msec">Time to press the button in ms.  This must be 7 or greater.</param>
            <remarks>This will throw if the msec value is too low.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickAccessoryControl.TurnPowerOff(System.Int32)">
            <summary>
            Turn power supply off for the indicated length of time.
            </summary>
            <param name="msec">Time to turn the power off in ms.  This must be 7 or greater.</param>
            <remarks>This will throw if the msec value is too low.</remarks>
            <remarks>This assumes the power supply is attached to the blue arduino connectors.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickAccessoryControl.TimedConnectDisconnect(System.Int32)">
            <summary>
            Connect for a given time, then disconnect.
            If we are connected to the power button, this is a timed button press.
            </summary>
            <param name="msec">Time to connect in ms.  This should be 7 or greater due to
            hardware restrictions.</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickAccessoryControl.TimedDisconnectConnect(System.Int32)">
            <summary>
            Disconnect for a given time then connect.
            </summary>
            <param name="msec">Time to disconnect in ms.  This should be 7 or greater due to
            hardware restrictions.</param>
            <remarks>This should not be used when the power button is connected to the power port.
            It will leave the power button in an on state.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.QuickAccessoryControl.DoWork">
            <summary>
            Send a command to the arduino to turn the power button on and off with an arduino delay in
            the middle.
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.Battery">
            <summary>
            Class used to lookup battery data on a device
            </summary>
            <remarks>For devices without a battery such as Studio,
            some of the battery functions in this class will return 0,
            but they all should run without crashing.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Battery.ACPowerPluggedIn">
            <summary>
            Returns true if a an AC Power Line is detected
            </summary>
            <returns>true if the device is plugged in</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Battery.BatteryRemaining">
            <summary>
            Returns an integer representing the percent of battery charge remaining.
            </summary>
            <returns>A percentage of the battery remaining or 100 if no battery is found</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Battery.FullChargedCapacity">
            <summary>
            Get the battery FCC value
            </summary>
            <returns>The FCC value for the main battery or 0 if no battery is found</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Battery.DesignCapacity">
            <summary>
            Get the battery's design capacity
            </summary>
            <returns>The battery design capacity or 0 if no battery is found</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.Battery.SystemPowerStatus">
            <summary>
            system power status -- returns from Kernel32::GetSystemPowerStatus
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.Battery.NativeMethods">
            <summary>
            PInvoke for Native code
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Battery.NativeMethods.GetSystemPowerStatus(Microsoft.HWSW.Test.Utilities.Battery.SystemPowerStatus@)">
            <summary>
            Get power status using native kernel32 hooks
            </summary>
            <param name="sps">structure containing power status information</param>
            <returns>true if successful</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.BatteryLog">
            <summary>
            Class used to log battery data during a test run
            Usage:
            BatteryLog batteryLog = new BatteryLog();
            ...
            batteryLog.LogBattery("Descriptive Text");
            ...
            
            If you're using the battery log instance in a worker thread, make the variable a static.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.BatteryLog.#ctor(System.String)">
            <summary>
            Constructor with optional log file override
            </summary>
            <param name="fileName">the name of the log file.  Suggested extension: .csv</param>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.BatteryLog.LogFile">
            <summary>
            Accessor for the path for the log file to be used.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.BatteryLog.LogBattery(System.String)">
            <summary>
            Log the current battery settings
            </summary>
            <param name="message">tag to put in file</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.CloudUtilities">
            <summary>
            Class for Windows Cloud specific functionality
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.CloudUtilities.IsCloudOSException(System.ComponentModel.Win32Exception)">
            <summary>
            Determine if an exception was thrown due to cloud os locks
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.CloudUtilities.IsCloudOS">
            <summary>
            Determine if the current OS is Windows S.
            This will detect whether the current os is the locked down version of cloud OS.
            Windows S dev build or pro will result in false return.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.ComPortLookup">
            <summary>
            utility class used to find COM ports on the current system
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.ComPortLookup.FindComPort(System.String)">
            <summary>
            This will find the com port for the first encountered device.  If there
            is more than one, this will return the port for the first device found.
            </summary>
            <param name="deviceString">string identifying the device to find</param>
            <returns>com port found or 0</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.ComPortLookup.FindUSBSerialPort">
            <summary>
            Get the COM port associated with the device using the device name
            "USB Serial Port"
            </summary>
            <returns> the com port found OR
            0 if no device or more than 1 device found</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.ComPortLookup.GetDeviceList(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Get a list of communications devices whose device names include the string given
            </summary>
            <param name="deviceString">the string to look for</param>
            <param name="devList">a list of the devices found</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.ComPortLookup.GetComPortFromString(System.String)">
            <summary>
            Get the COM port number from a device caption string
            </summary>
            <param name="deviceString">the string to parse</param>
            <returns>the port number or 0 if not successful</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.CSVDataLog">
            <summary>
            CSV data logging class
            This will write CSV data to a log file including header information if
            this is specified.
            The current implementation opens the file for each write so that data is not lost.
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.CSVDataLog.IsLogging">
            <summary>
            Determine if this instance is presently setup for logging 
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.CSVDataLog.AddTimeStamp">
            <summary>
            Accessor to control whether time stamps are added to the start of each line
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.CSVDataLog.FileName">
            <summary>
            Set the name of the file to use.  This should include a full path if the
            current directory is not to be used.
            Data logging will not occur if a file name is not set.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.CSVDataLog.LogData(System.String)">
            <summary>
            Add a line to the data file.  Data within this string should be separated by commas
            </summary>
            <param name="dataToLog">the data to add to the file</param>
            <returns>true on success</returns>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.CSVDataLog.DataHeading">
            <summary>
            Set or get the column header string to be written to the file
            This data will be written to the file when it changes or when a new file is opened
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.CSVDataLog.AddToDataLog(System.String)">
            <summary>
            Add a line to the CSV data log file.
            </summary>
            <param name="lineToAdd"></param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.EventLogHelper">
            <summary>
            Helper class for event log related operations
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.EventLogHelper.EnableEventLog(System.String,System.Int64,System.Int32)">
            <summary>
            Enables the specified event log with the specified paramter
            </summary>
            <param name="evtLogName">Name of the event log</param>
            <param name="sizeInMegaBytes">size of the log File</param>
            <param name="logLevel">level for the event log</param>
            <returns>true if the event log is enabled successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.EventLogHelper.EnableEventLog(System.String)">
            <summary>
            Enables the specified event log with the specified paramter
            </summary>
            <param name="evtLogName">Name of the event log</param>
            <returns>true if the event log is enabled successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.EventLogHelper.DisableEventLog(System.String)">
            <summary>
            Disables the specified event log
            </summary>
            <param name="evtLogName">Name of the event log</param>
            <returns>true if the event log is enabled successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.EventLogHelper.ClearEventLog(System.String)">
            <summary>
            Clears the specified event log
            </summary>
            <param name="evtLogName">Name of the event log</param>
            <returns>true if the event log is cleared successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.EventLogHelper.CheckForErrorsOrWarnings(System.String)">
            <summary>
            Returns a list of errors or warnings from an event log
            </summary>
            <param name="evtLogName">Name of the event log to be searched</param>
            <returns>List of errors\warning events from an event log</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.EventLogHelper.CheckForEvent(System.String,System.Int32)">
            <summary>
            Returns a list of events with a particular event Id from an event log
            </summary>
            <param name="evtLogName">Name of the event log to be searched</param>
            <param name="eventId">Name of the eventId to look for in the event log</param>
            <returns>List of events corresponding to a particular event ID</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.EventLogHelper.CheckForEventInTimeSpan(System.String,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Checks for a particular event in the time span
            </summary>
            <param name="evtLogName">Name of the event log to be searched</param>
            <param name="eventId">Name of the eventId to look for in the event log</param>
            <param name="startTime">Start time for the time span</param>
            <param name="endTime">End time for the time span</param>
            <returns>true if the particular event is found in the timespan, false if it is not found</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.EventLogHelper.CheckForErrorsOrWarningsUsingWevtutil(System.String,System.String)">
            <summary>
            Returns a list of errors or warnings from an event log using wevtutil
            </summary>
            <param name="evtLogName">Name of the event log to be searched</param>
            <param name="resultsFile">Name of the file in which results need to be saved</param>
            <returns>List of errors\warning events from an event log</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.EventLogHelper.WriteToFile(System.String,System.Collections.Generic.IEnumerable{System.Diagnostics.Eventing.Reader.EventLogRecord},System.IO.FileMode)">
            <summary>
            Writes an event collection to a file
            </summary>
            <param name="outputFile">Name of the output file</param>
            <param name="events">Name of the events to be written to the file</param>
            <param name="mode">file mode to be used while writing to the file</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.EventLogHelper.WriteToFile(System.String,System.String,System.IO.FileMode)">
            <summary>
            Writes an output stream to a file
            </summary>
            <param name="outputFile">Name of the output file</param>
            <param name="outputStream">Stream to be written to the file</param>
            <param name="mode">file mode to be used while writing to the file</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.Logger">
            <summary>
            Class to support logging in this library.  This currently writes logs to a log file.
            For user information messages, use Logger.Comment
            For warnings messages, use Logger.Warning
            For error messages, use Logger.Error
            For internal messages used to debug an issue, use Logger.Debug.  These will only be
            seen if the Logger is set to verbose mode.  Debug messages are used to track down a
            problem in the code and are not intended to be seen by an end user.
            </summary>
            <remarks>
            To turn off all logging from this class, use
            Logger.SuppressAll = true;
            </remarks>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.Logger.LogType">
            <summary>
            the type of log to be added
            Debug and Function entry/exit messages are only displayed in verbose mode
            Debug is intended for test developer use when more data is needed to track down a problem.
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.Logger.TestResultEnum">
            <summary>
            Enumeration used for test results
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Comment(System.String)">
            <summary>
            Add a comment to the log output.
            Comment messages are intended for all types of informational messages.
            Examples would include test execution progress, test results.
            </summary>
            <param name="strToWrite">string to be written</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Comment(System.String,System.Object[])">
            <summary>
            Add a comment to the log output. 
            Comment messages are intended for all types of informational messages.
            Examples would include test execution progress, test results.
            </summary>
            <param name="format">string format</param>
            <param name="values">values used by the format</param>
            <example>Comment("{0} {1}", "Hello", "World");</example>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Error(System.String)">
            <summary>
            Log an error message
            Error messages are intended to be used to indicate an error which
            likely causes a test to fail. These are also used to indicate why a test failed.
            </summary>
            <param name="strToWrite">the error message</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Error(System.String,System.Object[])">
            <summary>
            Log an error message
            Error messages are intended to be used to indicate an error which
            likely causes a test to fail. These are also used to indicate why a test failed.
            </summary>
            <param name="format">string format</param>
            <param name="values">values used by the format</param>
            <example>Error("{0} {1}", "Hello", "World");</example>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Warning(System.String)">
            <summary>
            Log a warning message
            Warning messages are intended to be used to indicate an issues which may or may not cause a test to fail.
            </summary>
            <param name="strToWrite">the warning message</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Warning(System.String,System.Object[])">
            <summary>
            Log a warning message
            Warning messages are intended to be used to indicate an issues which may or may not cause a test to fail.
            </summary>
            <param name="format">string format</param>
            <param name="values">values used by the format</param>
            <example>Warning("{0} {1}", "Hello", "World");</example>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Debug(System.String)">
            <summary>
            Add a debug-level message to the log output.
            These will only be added if verbose mode is turned on.
            Debug messages are intended for test developer use when more data is needed to track down a problem.
            </summary>
            <param name="strToWrite">message to be written</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Debug(System.String,System.Object[])">
            <summary>
            Add a debug-level message to the log output.
            These will only be added if verbose mode is turned on.
            Debug messages are intended for test developer use when more data is needed to track down a problem.
            </summary>
            <param name="format">string format</param>
            <param name="values">values used by the format</param>
            <example>Debug("{0} {1}", "Hello", "World");</example>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.FunctionEnter">
            <summary>
            Log function entry point
            </summary>
            <remarks>This will only show up if verbose logging is turned on.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.FunctionLeave">
            <summary>
            Log function exit point
            </summary>
            <remarks>This will only show up if verbose logging is turned on.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Indent">
            <summary>
            indent log entries
            This will not effect WEX logger output
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Unindent">
            <summary>
            undo previous indent
            This will not effect WEX logger output
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.DateTimeString(System.DateTime)">
            <summary>
            Convert the time given to a string.
            </summary>
            <param name="timeToConvert"></param>
            <returns></returns>
            <remarks>this allows a uniform date time display across applications</remarks>
            <remarks>this string is deliberately not understood by excel as a
            date/time string so that it will not truncate the resolution on the display
            for csv files</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.CurrentFunc(System.Boolean)">
            <summary>
            Get the name of the function calling this one
            </summary>
            <param name="justFuncName">true to just get the Function name without calling info.</param>
            <returns>the function name</returns>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.Logger.lastCaller">
            <summary>
            set by error and debug, reset when each line is logged
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.MyCaller">
            <summary>
            Keep track of what function called logging for error and debug logging
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.LogTestStart(System.String)">
            <summary>
            log start of test
            </summary>
            <param name="testName">name of test</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.LogResult(System.Boolean,System.String)">
            <summary>
            log test result
            </summary>
            <param name="passed">true if test passed</param>
            <param name="testName">name of test</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.LogResult(Microsoft.HWSW.Test.Utilities.Logger.TestResultEnum,System.String)">
            <summary>
            log test result
            </summary>
            <param name="testResult">Result of the test</param>
            <param name="testName">name of test</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Reset">
            <summary>
            reset count of passed and failed tests
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.SuppressAll">
            <summary>
            Accessor to turn off all log messages.
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.LogFileWithDir">
            <summary>
            get the log file name with the directory path attached
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.LogFileName">
            <summary>
            Accessor for name of the log file.  Set this to string.empty for no file output.
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.LogDirName">
            <summary>
            Accessor for name of the directory used for creating log files.
            Set this to string.empty for no file output.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.LogAll">
            <summary>
            Set the log level to Debug.  This will turn on the log for ALL messages.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Verbose(System.Boolean)">
            <summary>
            Set the log level to verbose.  This will turn on the log for
            everything
            </summary>
            <param name="useVerbose">use true for verbose mode, false to turn it off</param>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.LogLevel">
            <summary>
            Accessor to set the current log level.  Default is eWarning
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.TimeStamps">
            <summary>
            Accessor for whether logs have time stamps
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.ElapsedTime">
            <summary>
            Accessor for whether logs have elapsed time within the time stamp information.
            This value is not used if time stamps are not enabled
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.PassedTests">
            <summary>
            accessor for number of passed tests
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.FailedTests">
            <summary>
            accessor for number of failed tests
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.SkippedTests">
            <summary>
            accessor for number of skipped tests
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.ReportRunningTotal">
            <summary>
            accessor for whether a running total of tests pass/fails is added to
            the end of each test log
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.UseWexLogging">
            <summary>
            accessor for whether WEX logging is used
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.AppendToFile">
            <summary>
            accessor for whether the log file is truncated or appended to
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.LastError">
            <summary>
            Get the last error message sent.
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.Logger.Initialized">
            <summary>
            Determine if the logger is fully initialized.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.SetFileName(System.String)">
            <summary>
            Set the name of the log file.  If the file or directory is changed, this will close the current
            logs and restart them using the new file.
            </summary>
            <param name="newFileName"></param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.SetDirName(System.String)">
            <summary>
            Set directory to use for log files.
            </summary>
            <param name="newDirName"></param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.AddToLog(Microsoft.HWSW.Test.Utilities.Logger.LogType,System.String)">
            <summary>
            Add a message to the log
            </summary>
            <param name="logType">type of message</param>
            <param name="strToWrite">message to add</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.CloseLogs">
            <summary>
            Close down all current logs.  Set this up to reinitialize on next log request.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.Initialize">
            <summary>
            setup logger and create log file.  Logger will always send output to stdout.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Logger.AddLogFile(System.String)">
            <summary>
            Add a log file to the trace output.
            </summary>
            <param name="logFileName">the name of the log file</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm">
            <summary>
            Base class for Windows Form applications to include Multi-threaded
            functionality for Widget manipulation.  The functions in this class will
            use the invoke methodology when accessing a widget created in another thread.
            </summary>
            <remarks>If you want to use Visual Studio Form Designer, having the processor
            set to x64 may not work.  There is a bug in Visual Studio that does not work
            when using a base class other than 'Form' with x64.  x86 works fine with Form
            Designer.  Builds work fine for x64, it is only the form designer display that
            has issues.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SyncTextBoxAndValue(System.Windows.Forms.TextBox,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Read the text box value and confirm it is valid.  If it is, update value.  If not,
            set text box to value input.
            This is designed to work with string that represent integers.
            </summary>
            <param name="textBox">The text box</param>
            <param name="maximum">maximum allowed value</param>
            <param name="minimum">minimum allowed value</param>
            <param name="value">The new value if it is valid.  This will not change
            if the value in the text box is not valid.</param>
            <returns>true if value is valid</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAnyTextCallback">
            <summary>
            This delegate enables asynchronous calls for setting
            the text property on a TextBox control.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAnyText(System.Windows.Forms.TextBox,System.String)">
             <summary>
             Set the display value of a text box from any thread
             
             If the calling thread is different from the thread that
             created the TextBox control, this method creates a
             SetAnyTextCallback and calls itself asynchronously using the
             Invoke method.
            
             If the calling thread is the same as the thread that created
             the TextBox control, the Text property is set directly. 
             </summary>
             <param name="inp_Control">The textbox control</param>
             <param name="inp_Text">The value to place in the textbox</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAnyLabelCallback">
            <summary>
            This delegate enables asynchronous calls for setting
            the text property on a TextBox control.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAnyLabel(System.Windows.Forms.Label,System.String)">
             <summary>
             Set the display value of a label from any thread
             
             If the calling thread is different from the thread that
             created the label control, this method creates a
             SetAnyLabelCallback and calls itself asynchronously using the
             Invoke method.
            
             If the calling thread is the same as the thread that created
             the label control, the Text property is set directly. 
             </summary>
             <param name="inp_Control">The label to set</param>
             <param name="inp_Text">the text value to use</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_ControlEnabled_Callback">
            <summary>
            Delegate used to allow asynchronous enable/disable of a control
            </summary>
            <param name="inp_Control">the control to change</param>
            <param name="inp_Enabled">true to enable</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_ControlEnabled(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Set a control to enabled or disabled regardless of what thread
            the caller is in.
            </summary>
            <param name="inp_Control">the control to change</param>
            <param name="inp_Enabled">true to enable</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_ControlVisible_Callback">
            <summary>
            Delegate used to allow asynchronous setting of visible attribute of a control
            </summary>
            <param name="inp_Control">the control</param>
            <param name="inp_Visible">true to make visible</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_ControlVisible(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Set the visibility of a control regardless of what thread
            the caller is in.
            </summary>
            <param name="inp_Control">the control to change</param>
            <param name="inp_Visible">true to make visible</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_BGColor_Callback">
            <summary>
            Delegate used to allow asynchronous coloring of a control
            </summary>
            <param name="inp_Control">the control</param>
            <param name="inp_Color">the color to use</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_BGColor(System.Windows.Forms.Control,System.Drawing.Color)">
            <summary>
            Set a control background color regardless of what thread
            the caller is in.
            </summary>
            <param name="inp_Control">the control to change</param>
            <param name="inp_Color">the color to use</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_FGColor_Callback">
            <summary>
            Delegate used to allow asynchronous coloring of a control
            </summary>
            <param name="inp_Control">the control</param>
            <param name="inp_Color">the color to use</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_FGColor(System.Windows.Forms.Control,System.Drawing.Color)">
            <summary>
            Set a control foreground color regardless of what thread
            the caller is in.
            </summary>
            <param name="inp_Control">the control to change</param>
            <param name="inp_Color">the color to use</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_ButtonPress_Callback">
            <summary>
            delegate for allowing button press from any thread.
            </summary>
            <param name="inp_Control">the button to press</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_ButtonPress(System.Windows.Forms.Button)">
            <summary>
            Press a button regardless of whether it was created in the current thread
            or not.
            </summary>
            <param name="inp_Control">the button to press</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAnyProgressBarCallback">
            <summary>
            This delegate enables asynchronous calls for setting the progress property on a ProgressBar control.
            </summary>
            <param name="inp_Control">the progress bar</param>
            <param name="percentage">the new progress bar value.</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_ProgressBar(System.Windows.Forms.ProgressBar,System.Int32)">
            <summary>
            Set the value in a progress bar from any thread.
            </summary>
            <param name="inp_Control">the progress bar</param>
            <param name="percentage">the new progress bar value. this value is not validated</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAnyAddToListBoxCallback">
            <summary>
            This delegate enables asynchronous calls for adding an item to a list box.
            </summary>
            <param name="listBox">the list box to add to</param>
            <param name="textToAdd">the text to be added.</param>
            <param name="insureVisible">true to insure added line is visible</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_AddToListBox(System.Windows.Forms.ListBox,System.String,System.Boolean)">
            <summary>
            Add an item to the end of a list box regardless of which thread the list box
            was created in.
            </summary>
            <param name="listBox">the list box to add to</param>
            <param name="textToAdd">the text to be added.</param>
            <param name="insureVisible">true to insure added line is visible</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAnyAddToListBoxColoredCallback">
            <summary>
            This delegate enables asynchronous calls for adding an item to a list box.
            </summary>
            <param name="listBox">the list box to add to</param>
            <param name="textToAdd">the text to be added.</param>
            <param name="ItemColor">Color to use for the item</param>
            <param name="insureVisible">true to insure added line is visible</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_AddToListBoxColored(System.Windows.Forms.ListBox,System.String,System.Drawing.Color,System.Boolean)">
            <summary>
            Add an item to the end of a list box regardless of which thread the list box
            was created in.
            </summary>
            <param name="listBox">the list box to add to</param>
            <param name="textToAdd">the text to be added.</param>
            <param name="ItemColor">Color to use for the item</param>
            <param name="insureVisible">true to insure added line is visible</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.MultiThreadForm.ControlTextUpdater">
            <summary>
            Delegate for setting text in a tool strip status label
            </summary>
            <param name="toolStrip">tool strip containing the control</param>
            <param name="ctrl">the control</param>
            <param name="text">the text value to use</param>
            <param name="fgColor">the foreground color</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_StatusBarLabel(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripStatusLabel,System.String,System.Drawing.Color)">
            <summary>
            Set the text in a status bar control from any thread
            </summary>
            <param name="toolStrip">status bar strip containing the control</param>
            <param name="control">the control with a text value to be set</param>
            <param name="text">the string to set the text value to</param>
            <param name="fgColor">the foreground color for the text</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_ToolStripItemEnabled(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripItem,System.Boolean)">
            <summary>
            Enable or disable a tool strip control regardless of the thread this is called from
            </summary>
            <param name="toolStrip">the tool strip containing the control to be updated</param>
            <param name="item">the control to be updated</param>
            <param name="enabled">true to enable, false to disable</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.MultiThreadForm.SetAny_ToolStripItemChecked(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripItem,System.Boolean)">
            <summary>
            Check or uncheck a tool strip control regardless of the thread this is called from
            </summary>
            <param name="toolStrip">the tool strip containing the control to be updated</param>
            <param name="item">the control to be updated</param>
            <param name="check">true to check, false to uncheck</param>
            <remarks>current implementation handles tool strip buttons only</remarks>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.NetworkImpersonation">
            <summary>
            Class that allows running of commands as a specific user.
            Usage:
            
            using (new NetworkImpersonation(@"user", @"domain", @"password")
            {
                Commands needing impersonation go here
            }
            
            For default LLU_NAO user:
            using (new NetWorkImpersonation()
            {
                Commands needing impersonation go here
            }
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.NetworkImpersonation.#ctor(System.Boolean)">
            <summary>
            Network Impersonation using default or ntdev\wintestl user settings
            </summary>
            <param name="useWintestl">true to use ntdev\wintestl. -- wintestl is being deprecated by WTT team</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.NetworkImpersonation.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="userInp">user name for impersonation</param>
            <param name="domainInp">domain to use</param>
            <param name="passwordInp">password to use</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.NetworkImpersonation.#ctor(System.String,System.String)">
            <summary>
            constructor.  Setup inpersonation using local host for domain
            </summary>
            <param name="userInp">user name for impersonation</param>
            <param name="passwordInp">password to use</param>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.NetworkImpersonation.UserName">
            <summary>
            return user name for this impersonation
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.NetworkImpersonation.DomainName">
            <summary>
            return domain used for this impersonation
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.NetworkImpersonation.Password">
            <summary>
            return password used for this impersonation
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.NetworkImpersonation.Dispose">
            <summary>
            Method for disposing of an instance of this class
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.NetworkImpersonation.Dispose(System.Boolean)">
            <summary>
            Dispose of instance
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.NetworkImpersonation.Finalize">
            <summary>
            Destructor to handle native code disposal if needed
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.NetworkImpersonation.SetupImpersonation(System.String,System.String,System.String)">
            <summary>
            Setup an impersonation using the user information provided
            </summary>
            <param name="userNameInp">user name for impersonation</param>
            <param name="domainNameInp">domain to use</param>
            <param name="passwordInp">password to use</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.PerfData">
            <summary>
            Class used to get performance data
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.PerfData.GetCurrentCpuUsage">
            <summary>
            Get the CPU usage percentage value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.PerfData.GetAvailableRAM">
            <summary>
            Get available ram in MBytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.PerfData.GetProcessTimes">
            <summary>
            Get percent processor time for each process
            </summary>
            <returns>dictionary with process name, percent value pairs</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.PerfData.GetProcessRAM">
            <summary>
            Get ram usage for each process.  If more than 1 process has the same name,
            only the first process is recorded.
            </summary>
            <returns>dictionary with process name, percent value pairs</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.PerfData.LogProcessRAM">
            <summary>
            Write the current process ram data to the log
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.PS">
            <summary>
            Hooks for PowerShell interface
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.PS.SetupPSPackage(System.String)">
            <summary>
            Setup and install a powershell package if it is not currently installed.
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.PS.InstallModule(System.String)">
            <summary>
            Install a powershell module
            </summary>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.PS.UpdateModule(System.String)">
            <summary>
            Update a powershell module
            </summary>
            <param name="moduleName"></param>
            <returns>true if successful, false if not or the module is not installed</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.PS.RunPSCommand(System.String,System.Boolean)">
            <summary>
            Run a powershell command
            </summary>
            <param name="psCmd">the command to run </param>
            <param name="admin">true to run with execution policy set to bypass</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.PS.RunPSCommand(System.String,System.String@,System.Boolean)">
            <summary>
            Run a powershell command
            </summary>
            <param name="psCmd">the command to run </param>
            <param name="outStr">stdout reply from command.
            stderr will also be included if an error occurs</param>
            <param name="admin">true to run with execution policy set to bypass</param>
            <returns>true on success</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.RegistryUtils">
            <summary>
            Class containing helpers for accessing registry entries
            </summary>
            <remarks>Code in this class is designed not to throw exceptions.
            Any exceptions encountered will be reported using the Logger and error status returned</remarks>
            <remarks>boolean values are read and written as dword data</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.GetBoolValue(Microsoft.Win32.RegistryKey,System.String,System.Boolean@)">
            <summary>
            Get a boolean value from the registry
            </summary>
            <param name="key">the key containing the value</param>
            <param name="valueLabel">the label of the value to data to be retrieved</param>
            <param name="value">the value found on success. not set on error</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.GetStringValue(Microsoft.Win32.RegistryKey,System.String,System.String@)">
            <summary>
            Get a string value from the registry
            </summary>
            <param name="key">the key containing the value</param>
            <param name="valueLabel">the label of the value to data to be retrieved</param>
            <param name="value">the value found on success. not set on error</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.GetInt32Value(Microsoft.Win32.RegistryKey,System.String,System.Int32@)">
            <summary>
            Get a dword int value from the registry
            </summary>
            <param name="key">the key containing the value</param>
            <param name="valueLabel">the label of the value to data to be retrieved</param>
            <param name="value">the value found on success. not set on error</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.GetValue(Microsoft.Win32.RegistryKey,System.String,System.Object@)">
            <summary>
            Get an untyped value value from the registry
            </summary>
            <param name="key">the registry key containing the value to be read</param>
            <param name="valueLabel">label for the value to be read</param>
            <param name="value">The value read or 0 if the value is not found. will be 0 on error</param>
            <returns>true on success, false if the value could not be accessed</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.GetByteArray(Microsoft.Win32.RegistryKey,System.String,System.Byte[]@)">
            <summary>
            Get a dword int value from the registry
            </summary>
            <param name="key">the key containing the value</param>
            <param name="valueLabel">the label of the value to data to be retrieved</param>
            <param name="values">the values found on success. null if data not found</param>
            <returns>true on success, false if an access error occurs.
            Will return success if value not found.</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.SetBoolValue(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
            Set a boolean value in the registry.  Create the value entry if it does not exist
            </summary>
            <param name="key">the tree location where the value is to be set.
            Must be opened with write access</param>
            <param name="valueLabel">the label to use for the value to be set</param>
            <param name="value">the value to write to the registry</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.SetStringValue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Set a string value in the registry.  Create the value entry if it does not exist
            </summary>
            <param name="key">the tree location where the value is to be set.
            Must be opened with write access</param>
            <param name="valueLabel">the label to use for the value to be set</param>
            <param name="value">the value to write to the registry</param>
            <returns>the value found on success or string.Empty on failure</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.SetInt32Value(Microsoft.Win32.RegistryKey,System.String,System.Int32)">
            <summary>
            Set dword value in the registry.  Create the value entry if it does not exist
            </summary>
            <param name="key">the tree location where the value is to be set.
            Must be opened with write access</param>
            <param name="valueLabel">the label to use for the value to be set</param>
            <param name="value">the value to write to the registry</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.SetByteArray(Microsoft.Win32.RegistryKey,System.String,System.Byte[])">
            <summary>
            Set an array of byte values in the registry.  Create the value entry if it does not exist
            </summary>
            <param name="key">the tree location where the value is to be set.
            Must be opened with write access</param>
            <param name="valueLabel">the label to use for the value to be set</param>
            <param name="values">the values to write to the registry</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.GetBoolValueHKLM(System.String,System.String,System.Boolean@)">
            <summary>
            Get a boolean value from the registry using //HKLM/branch/valueLabel
            </summary>
            <param name="branch">branch containing the value to be gotten</param>
            <param name="valueLabel"></param>
            <param name="value">the value read from the registry</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.GetStringValueHKLM(System.String,System.String,System.String@)">
            <summary>
            Get a string value from the registry using //HKLM/branch/valueLabel
            </summary>
            <param name="branch">branch containing the value to be gotten</param>
            <param name="valueLabel"></param>
            <param name="value">the value read from the registry</param>
            <returns>the value found on success or string.Empty on failure</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.GetInt32ValueHKLM(System.String,System.String,System.Int32@)">
            <summary>
            Get a unsigned int value from the registry using //HKLM/branch/valueLabel
            </summary>
            <param name="branch">branch containing the value to be gotten</param>
            <param name="valueLabel"></param>
            <param name="value">the value read from the registry</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.SetBoolValueHKLM(System.String,System.String,System.Boolean)">
            <summary>
            Set a boolean value in the registry using //HKLM/branch/valueLabel
            </summary>
            <param name="branch">branch containing the value to be set</param>
            <param name="valueLabel"></param>
            <param name="value">the value to use</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.SetStringValueHKLM(System.String,System.String,System.String)">
            <summary>
            Set a string value in the registry using //HKLM/branch/valueLabel
            </summary>
            <param name="branch">branch containing the value to be set</param>
            <param name="valueLabel"></param>
            <param name="value">the value to use</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.SetInt32ValueHKLM(System.String,System.String,System.Int32)">
            <summary>
            Set a DWORD int value in the registry using //HKLM/branch/valueLabel
            </summary>
            <param name="branch">branch containing the value to be set</param>
            <param name="valueLabel"></param>
            <param name="value">the value to use</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.RemoveRegKeyTreeHKLM(System.String,System.String)">
            <summary>
            Remove the registry key values starting at subkey under basekey.
            The entire tree under subKey including subKey will be deleted if it exists.
            Uses HKLM (HKEY_LOCAL_MACHINE) branch of registry.
            </summary>
            <param name="baseKey">the base location containing the subkey to be deleted.</param>
            <param name="subKey">the key to be removed</param>
            <returns>true on success or if the registry key doesn't exist</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.RemoveRegValueHKLM(System.String,System.String)">
            <summary>
            Remove a single registry value at the indicated location
            Uses HKLM (HKEY_LOCAL_MACHINE) branch of registry.
            </summary>
            <param name="baseKey">the base location containing the subkey to be deleted.</param>
            <param name="valueLabel">the value to be removed</param>
            <returns>true on success or if the registry key doesn't exist</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RegistryUtils.KeyExistsHKLM(System.String,System.String)">
            <summary>
            Determine if a key exists in the registry using the path: //HKEY_LOCAL_MACHINE/baseKey/subKey
            </summary>
            <param name="baseKey">the base of the key to look for within HKLM</param>
            <param name="subKey">the key to look for</param>
            <returns>true if the key was found, false if the key is not found or there was an access error</returns>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.RegistryUtils.LastErrorCode">
            <summary>
            The last error code encountered if an error was found.
            This will be undefined if no errors have been encountered.
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.RunApplication">
            <summary>
            Class supporting application running with stdout and stderr logging
            Current code supports synchronous running of an application only
            </summary>
            <remarks>This class was designed to run one program at a time.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RunApplication.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="inpTimeoutMinutes">time in minutes to allow the application to run
            without data being seen on stdout.
            Use 0 for no timeout</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RunApplication.RunApp(System.String,System.String,System.Boolean)">
            <summary>
            run the specified application with the arguments given
            this will wait for the application to finish
            </summary>
            <param name="application">program to run with path if needed</param>
            <param name="arguments">arguments to pass to program</param>
            <param name="setWorkingDirectory">true to temporarily set the working directory to the one
            specified in the application parameter.  This is ignored if no path has been specified.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.RunApplication.EchoStdOut">
            <summary>
            Determine if stdout should be echoed to the console if it is not being logged
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.RunApplication.LogStdOut">
            <summary>
            Determine if stdout is being added to the log
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.RunApplication.ExitCode">
            <summary>
            Get the exit code returned from the application run
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.RunApplication.StdoutContents">
            <summary>
            Get stdout data seen during run
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.RunApplication.StderrContents">
            <summary>
            get stderr data seen during run
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.RunApplication.StopNow">
            <summary>
            Set this to true to abort the execution of the current program.
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.RunApplication.ErrorString">
            <summary>
            String to look for in stdout and stderr.
            If this is found, stop the application run.
            If this is "", no string is searched for.
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.RunApplication.HideCloudOSFail">
            <summary>
            When true, hide run failure error messages if the failure is due to cloud os.
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.RunApplication.FailedDueToCloudOS">
            <summary>
            This will be true if the application run failed and it was found to be due to cloud OS locks.
            If the application ran ok, this will be false.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RunApplication.StdoutHandler(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Handler to transfer application stdout to log file
            </summary>
            <param name="sendingProcess"></param>
            <param name="outLine"></param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.RunApplication.StderrorHandler(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Handler to add stderr to log file
            </summary>
            <param name="sendingProcess"></param>
            <param name="outLine"></param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.SendEmail">
            <summary>
            Class for sending mail in the Utilities Directory
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SendEmail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.HWSW.Test.Utilities.SendEmail"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SendEmail.SendMail(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends the mail.
            </summary>
            <param name="filename">The filename of what you want to attach to the email.</param>
            <param name="userNameTo">Name of the sent to user. In this case both the sender and the recipient</param>
            <param name="userNameFrom">Name of the user sending. In this case both the sender and the recipient</param>
            <param name="parsedData">What message you want to send to with your email</param>
            <param name="subject">The subject.</param>
            <param name="server">The server.</param>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.SystemInfo">
            <summary>
            Singleton class containing system information lookup queries.
            When the instance of this singleton is created, the system information data will be populated.
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.SystemInfo.ModelType">
            <summary>
            Model type enumeration
            Sorted with newer devices first
            </summary>
            <remarks>Add data to the TOP of the list for newer devices.</remarks>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.SystemInfo.OSVersion">
            <summary>
            OS version enumeration
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.SystemInfo.CPUType">
            <summary>
            CPU processor type - i3, i5, i7
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.SystemInfo.SSDType">
            <summary>
            SSD Driver Type
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.SystemInfo.Instance">
            <summary>
            Singleton instance accessor.  Read system info when instance is createdk
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsWin8">
            <summary>
            Checks if the OS is win8.x or not
            </summary>
            <returns>returns true if the OS is win8, false otherwise</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsWin10">
            <summary>
            Checks if the OS is win10 or not
            </summary>
            <returns>returns true if the OS is win10, false otherwise</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsTH2">
            <summary>
            Determine if the current OS is TH2
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsRS1">
            <summary>
            Determine if the current OS is RS1
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsRS2">
            <summary>
            Determine if the current OS is RS2
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsRS3">
            <summary>
            Determine if the current OS is RS3
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsRS4">
            <summary>
            Determine if the current OS is RS4
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsRS5">
            <summary>
            Determine if the current OS is RS5
            </summary>
            <returns></returns>
            <remarks>RS5 does not have a fixed build number as of yet,
            so this is checking that the build number is > RS4 value</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.OSID">
            <summary>
            Return a string identifying the current OS.  Example: "RS3" for OS = RS3
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.SupportsWin8">
            <summary>
            Determine if the device type for the device this is running on supports windows 8.1
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.SupportsWin8(Microsoft.HWSW.Test.Utilities.SystemInfo.ModelType)">
            <summary>
            Determine if the device type specified supports windows 8.1
            </summary>
            <param name="systemModelType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.Is64Bit">
            <summary>
            Is the current system 64 bit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetOSVersion">
            <summary>
            Get the os version value for this system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.OSBuildNumber">
            <summary>
            Get the value for the OS build number from the registry
            </summary>
            <returns>os build number</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.OSBuildImage">
            <summary>
            Get the value for the os build image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetHostName">
            <summary>
            Get the host name for the computer this is running on.
            </summary>
            <returns>the host name</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetUserName">
            <summary>
            Get the name of the current user
            </summary>
            <returns>the user name</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsAdministrator">
            <summary>
            Determine if the current user is in the Administrator group
            </summary>
            <returns>true if current user is an administrator</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetComputerModel">
            <summary>
            Determine the model of the DUT in use.
            </summary>
            <returns>computer model string</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetModelType">
            <summary>
            Get the device model being run on
            </summary>
            <returns>The model type for this device</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetCpuName">
            <summary>
            Get the name of the CPU being used
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetMaxCpuSpeedMhz">
            <summary>
            Get the max speed setting for the CPU in MHz
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetCpuType">
            <summary>
            Get the type of the CPU
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetSerialNumber">
            <summary>
            Get the serial number for this device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetSSDType">
            <summary>
            Get the SSD manufacturer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetDiskSize">
            <summary>
            Get the fixed disk size in bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetDiskSizeGB">
            <summary>
            Get the fixed disk size in GB
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetMemorySize">
            <summary>
            Get the size of the physical memory in bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetMemorySizeGB">
            <summary>
            Get the size of the physical memory in GB
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetUefiVersion">
            <summary>
            Get the current uefi version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetECVersion">
            <summary>
            Get the current EC version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetSAMVersion">
            <summary>
            Get the current SAM version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetAudioDriver">
            <summary>
            Get the current audio driver info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetVideoDriver">
            <summary>
            Get the current video driver info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.DeviceInfoStr">
            <summary>
            Output information contained in this class.
            This is basically ToString support for this static class.
            </summary>
            <returns>A string containing device information collected in this class.</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.AddMachineInfoToLog">
            <summary>
            Add lines of information for the current machine to the log controller by the Logger class using
            Logger.Comment
            </summary>
            <seealso cref="T:Microsoft.HWSW.Test.Utilities.Logger"/> 
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsManufactureMode">
            <summary>
            Determine whether this device is in manufacturing mode
            </summary>
            <returns>true if this device is in manufacturing mode</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.IsCustomerMode">
            <summary>
            Determine whether this device is in customer mode
            </summary>
            <returns>true if this device is in customer mode</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.HasNVidiaGraphics">
            <summary>
            Determine whether this device has an NVidia graphics driver active
            </summary>
            <returns>true if an nvidia graphics driver is found.</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            Hide the constructor so that a second instance cannot be created for this class
            </remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.Initialize">
            <summary>
            Initialize the data in the instance.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupOSVersion">
            <summary>
            Find the current OS Version information
            </summary>
            <returns>current os version if found</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupOSBuildNumber">
            <summary>
            Get the value for the OS build number from the registry
            </summary>
            <returns>os build number</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupOSBuildImage">
            <summary>
            Get the value for the OS build image
            </summary>
            <returns>os build number</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupHostName">
            <summary>
            Get the host name for the computer this is running on.
            </summary>
            <returns>the host name</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupUserName">
            <summary>
            Get the user name for the current user.
            </summary>
            <returns>the user name</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupComputerModel">
            <summary>
            Determine the model of the DUT in use.
            </summary>
            <returns>computer model string</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.SetCPUData">
            <summary>
            Set CPU-specific data in this instance
            </summary>
            <remarks>currently assumes i3, i5, i7 cpu types</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupModelType">
            <summary>
            Get the device model being run on
            </summary>
            <returns>The model type for this device</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupBiosData">
            <summary>
            Use WMIC to lookup device serial number, FW versions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupManuMode">
            <summary>
            Check for manufacturing mode
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.dumpage">
            <summary>
            Debug function to list device drivers
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.GetDriverVersion(System.String)">
            <summary>
            Get the version of a specific device driver
            </summary>
            <param name="deviceName">the value for DeviceName for the driver</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupSSDType">
            <summary>
            Get the value for the SSD Manufacturer from the registry
            </summary>
            <returns>SSD Type</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupDiskSize">
            <summary>
            Get the size of the fixed disk mounted on C: on this device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.SystemInfo.LookupRamSize">
            <summary>
            Get the value for the physical memory on this device
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.SystemInfo.win81ModelTypes">
            <summary>
            products that support windows 8.1 -- TFS file names can be different structure for these.
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.TraceParser">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.TraceParser.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="inpTraceFileName">the name of the text-based trace file to parse</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.TraceParser.GetTraceLogLines(System.Collections.Generic.List{Microsoft.HWSW.Test.Utilities.TraceParser.LogData}@,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Get trace log data that occurred between the 2 timestamps inclusive
            </summary>
            <param name="logDataFound"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="iteration"></param>
            <returns>true if data was found</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.TraceParser.FindLinesOfInterest(System.Collections.Generic.List{Microsoft.HWSW.Test.Utilities.TraceParser.LogData},System.String,System.Collections.Generic.List{Microsoft.HWSW.Test.Utilities.TraceParser.LogData}@,System.Boolean)">
            <summary>
            Go through the log data input and output data with information matching the string indicated.
            String compare is case-sensitive.
            </summary>
            <param name="logData">the input log data</param>
            <param name="stringToMatch">the string to match</param>
            <param name="logDataMatches">data with matching strings</param>
            <param name="fixIterations"></param>
            <returns>true if at least one match was found</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.TraceParser.LogData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.TraceParser.LogData.id">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.TraceParser.LogData.orig">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.TraceParser.LogData.timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.TraceParser.LogData.data">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.TraceParser.LogData.iteration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.TraceParser.ParseLine(System.String,System.Int32,Microsoft.HWSW.Test.Utilities.TraceParser.LogData@)">
            <summary>
            Parse the line from trace and put it into the data
            </summary>
            <param name="nextLine">the line to parse</param>
            <param name="iteration"></param>
            <param name="logData">the parsed data</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.TraceParser.ParseLineOrig(System.String,System.Int32,Microsoft.HWSW.Test.Utilities.TraceParser.LogData@)">
            <summary>
            Parse the line from trace and put it into the data
            </summary>
            <param name="nextLine">the line to parse</param>
            <param name="iteration"></param>
            <param name="logData">the parsed data</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.DiskDriveInterfaceType">
            <summary>
            Interface types for disk drives: currently support USB and SCSI- support for others can be added as needed
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.DiskDriveInterfaceType.USB">
            <summary>
            USB
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.DiskDriveInterfaceType.SCSI">
            <summary>
            SCSI
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.LogicalDiskDriveType">
            <summary>
            DriveTypes for win32_logicaldisks objects
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.LogicalDiskDriveType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.LogicalDiskDriveType.NoRootDirectory">
            <summary>
            No Root Directory
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.LogicalDiskDriveType.RemovableDisk">
            <summary>
            Removable Disk
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.LogicalDiskDriveType.LocalDisk">
            <summary>
            Local Disk
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.LogicalDiskDriveType.NetworkDrive">
            <summary>
            Network drive
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.LogicalDiskDriveType.CompactDisc">
            <summary>
            Compact disk
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.LogicalDiskDriveType.RAMDisk">
            <summary>
            RAM disk
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.UsbDisk">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.UsbDisk.GetUSBDrives">
            <summary>
            Gets the drive letters of USB drives
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.UsbDisk.GetSDDrives">
            <summary>
            Gets the drive letters of SD drives
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.UsbDisk.GetFlashDrives(Microsoft.HWSW.Test.Utilities.DiskDriveInterfaceType,Microsoft.HWSW.Test.Utilities.LogicalDiskDriveType)">
            <summary>
            Get a list of usb flash drives available.
            </summary>
            <returns>A list of drive letters corresponding to USB flash drives available.</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.UsbDisk.GetRemovableDrives">
            <summary>
            Get a list of removable drives.  This is will include all removable drives not just
            USB drives.
            </summary>
            <returns>a List of removable drives by letter</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.UsbDisk.GetAvailableDisks(Microsoft.HWSW.Test.Utilities.DiskDriveInterfaceType,Microsoft.HWSW.Test.Utilities.LogicalDiskDriveType)">
            <summary>
            Gets a collection of all available USB disk drives currently mounted.
            </summary>
            <returns>
            A list of drive letters for all available USB disk drives by letter
            </returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.Utilities">
            <summary>
            Static class containing common utilities that don't need any class setup
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.ConfirmParamNotNull(System.Object,System.String)">
            <summary>
            Utility function to confirm a parameter passed is not null.  This will throw an
            ArgumentNullException if the parameter is null.
            </summary>
            <param name="param">The parameter to check</param>
            <param name="paramName">The name associated with the parameter.  This will be used
            if an exception is thrown.</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.GetScreenBrightness(System.Int32@,System.Double@)">
            <summary>
            Determine the current screen brightness setting
            </summary>
            <param name="screenBrightness">current brightness value read from the system</param>
            <param name="displayPower">power used by display</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.RunCommand(System.String,System.String,System.Boolean)">
            <summary>
            Run a dos command.  If the filename does not contain a directory path,
            the current directory is used as the working directory.
            </summary>
            <param name="application">the exe file to run including file extension</param>
            <param name="parameters">parameters to pass to the exe file</param>
            <param name="runas">true to run command as an administrator</param>
            <returns>the process created or null if this fails</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.RunCommandAndWait(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Run a dos command and wait until it is finished executing.
            If the filename does not contain a directory path,
            the current directory is used as the working directory.
            </summary>
            <param name="application">the exe file to run including file extension</param>
            <param name="parameters">parameters to pass to the exe file</param>
            <param name="timeout">time to wait for command to end in ms</param>
            <param name="runas">true to run command as an administrator</param>
            <returns>the process created or null if this fails</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.LaunchProcessAsElevated(System.String,System.String,System.String@,System.Boolean)">
            <summary>
            Launches a process with the specified arguments as an administrator.
            This will wait for execution to complete before returning.
            </summary>
            <param name="application"> name of the application to start </param>
            <param name="args"> user specified arguments for the above process </param>
            <param name="outputString">the string object to contain the standard output returned from the process</param>
            <param name="logging">true to log call before it happens</param>
            <returns>
                0 - success
                -1 - exception generated
            </returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.DetermineExeAndPath(System.String,System.String@,System.String@)">
            <summary>
            Adjust the path to the program to run if it is in the current directory.
            </summary>
            <param name="application"></param>
            <param name="programToRun"></param>
            <param name="workingDirectory"></param>
            <remarks>This allows overriding programs in the path with programs in the current directory</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.KillProgram(System.String)">
            <summary>
            Kill all instances of the specified program that are currently running
            </summary>
            <param name="programExeFile">the exe associated with the program to kill</param>
            <remarks>This should be used with care.  Any data in the app will be lost</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.GetWMIQueryResult(System.String,System.String)">
            <summary>
            Get a WMI value from the system.
            </summary>
            <param name="wmiClassName">The class to use</param>
            <param name="wmiProperty">The property name within the class</param>
            <returns>the data retrieved from the query</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.MakeWmiCall(System.String,System.String,System.String)">
            <summary>
            Query the specified WMI namespace for a value and return it as a formatted string if found.
            </summary>
            <param name="wmiNameSpace">The namespace to use</param>
            <param name="wmiClassName">The class to use</param>
            <param name="wmiProperty">The property name within the class</param>
            <returns>string version of the value found or string.Empty if no value is found</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.MakeWmiCall(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Query the specified WMI namespace for a value and return it as a formatted string if found.
            </summary>
            <param name="wmiNameSpace">The namespace to use</param>
            <param name="wmiClassName">The WMI class to use for this query</param>
            <param name="wmiProperty">The property within this class to be found</param>
            <param name="useLocalMachine">true to use the local machine -- recommended</param>
            <param name="remoteMachineName">remote machine name</param>
            <param name="remoteMachineUserName">user name on remote machine</param>
            <param name="remoteMachineUserPassword">user password on remote machine</param>
            <returns>the first property value found.</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.MakeWmiCall(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Lookup a group of values using WMI lookups.
            </summary>
            <param name="wmiNameSpace">The namespace to use</param>
            <param name="wmiClassName">The WMI class to use for this query</param>
            <param name="wmiProperties">The properties to find values for within the class</param>
            <returns>list of property values retrieved in order of the property list received.
            Empty string will be placed in the list for properties with no values found.</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.MakeWmiCall(System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean,System.String,System.String,System.String)">
            <summary>
            Retrieve the specified properties using WMI lookup
            </summary>
            <param name="wmiNameSpace">The namespace to use</param>
            <param name="wmiClassName">The WMI class to use for this query</param>
            <param name="wmiProperties">The properties within this class to be found</param>
            <param name="useLocalMachine">true to use the local machine -- recommended</param>
            <param name="remoteMachineName">remote machine name</param>
            <param name="remoteMachineUserName">user name on remote machine</param>
            <param name="remoteMachineUserPassword">user password on remote machine</param>
            <returns>list of property values retrieved in order of the property list received.
            Empty string will be placed in the list for properties with no values found.</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.GetLockScreenSetting">
            <summary>
            Determine whether the lock screen is currently enabled or disabled
            </summary>
            <returns>the current lock screen setting</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.SetupLockScreen(System.Boolean)">
            <summary>
            Enable or disable the lock screen.  When returning from sleep mode, the DUT
            will come up with the lock screen on by default.  Disabling this allows the
            desktop to be displayed instead.
            </summary>
            <param name="enable">true to enable lock screen display</param>
            <returns>true on success</returns>
            <remarks>there are issues with toggling this value.  This code does extra work to only
            change the value if it does not equal the value requested or does not exist.</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.IsPluggedIn">
            <summary>
            Determine if machine is plugged in or running on battery
            </summary>
            <returns>true if plugged in</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.BatteryRemaining">
            <summary>
            Get the approximate percentage amount of full battery charge remaining.
            </summary>
            <returns>0 - 100 battery charge percentage</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.ValidateUUIDString(System.String)">
            <summary>
            Confirm that the string input is in valid UUID format
            </summary>
            <param name="uuidString">string to validate</param>
            <returns>true if string is valid</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.SetAppAdminLevel(System.String)">
            <summary>
            Setup admin privileges when an application runs
            </summary>
            <param name="applicationPath">the path to the application</param>
            <returns>true on success</returns>
            <remarks>This may not work for TH2</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.GetLineInFile(System.String,System.Int32,System.String@)">
            <summary>
            Read the indicated line number in the file.
            </summary>
            <param name="fileName">the file to be read</param>
            <param name="lineNumber">the number of the line to read.  1 for the first line</param>
            <param name="line">the data read</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.WriteLineToFile(System.String,System.String,System.Boolean)">
            <summary>
            write a string to a file with newline at the end
            </summary>
            <param name="fileName">the name of the file</param>
            <param name="data">the data to write</param>
            <param name="append">true to append to the file. false to overwrite the file.</param>
            <remarks>If there is a permissions error, this may throw an exception</remarks>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.Reboot(System.Boolean)">
            <summary>
            Reboot the DUT
            </summary>
            <param name="log">true to setup logs.  If false, caller needs to call Logger.CloseLogs</param>
            <returns>false. this should not return</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.SetAppRunAsAdmin(System.String)">
            <summary>
            Setup the application indicated to be run as administrator
            </summary>
            <param name="appPath">the path of the application. If no directory is given,
            the current directory is used</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.HexToInt(System.String,System.UInt32@)">
            <summary>
            Convert a hex string to an integer value.
            </summary>
            <param name="hexString"></param>
            <param name="intValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.FileCompare(System.String,System.String)">
            <summary>
            Compare 2 files and return the results
            </summary>
            <param name="file1">path for the first file to compare</param>
            <param name="file2">path for the second file to compare</param>
            <returns>true if files are equal</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.FileNameWithFullPath(System.String)">
            <summary>
            Get a filename with a complete path.
            If the filename already has a complete path, it is returned without
            modification.  Otherwise, the current working directory is added to
            the front of the filename supplied
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.LastBootupTime">
            <summary>
            Get the last system bootup time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.ConvertBinaryDateTime(System.Byte[])">
            <summary>
            gets a byte array as input and converts it to the DateTime Value: 
            The date time is stored as a filetime converted to hex byte array. 
            This method converts it back to int64 and creates the datetime from
            the int64 value of file time. 
            </summary>
            <param name="bytesDateTime">8 digit bytes array</param>
            <returns>corresponding DateTime</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.CopyFile(System.String,System.String)">
            <summary>
            Copy file from source to destination with logging support and file status checking
            </summary>
            <param name="sourceFile"></param>
            <param name="destFile"></param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.CopyFileToShare(System.String,System.String)">
            <summary>
            Copy a file to the share using the user settings specified to access the share.
            </summary>
            <param name="sourcePath">source file to be copied</param>
            <param name="destPath">the file to be copied to</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.Utilities.DirectoryCopy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copy 1 directory to another.
            based on MSDN https://docs.microsoft.com/en-us/dotnet/standard/io/how-to-copy-directories
            </summary>
            <param name="sourceDirName"></param>
            <param name="destDirName"></param>
            <param name="copySubDirs"></param>
            <param name="overwrite">added option, allow overwrite to be selectable</param>
            <returns>true if successful. false if errors were found</returns>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor">
            <summary>
            This class can be used to monitor a windows service
            </summary>
            <remarks>Most of this class requires being run by Administrator.
            A permissions exception may be thrown if not run using administrator-level credentials.
            </remarks>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.ServiceName">
            <summary>
            Name of the Windows service
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.IsRunning">
            <summary>
            Tells us if the Windows service is running
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.IsStopped">
            <summary>
            Tells us if the Windows service is stopped
            </summary>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.IsDisabled">
            <summary>
            Tells us if the Windows Service is disabled
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.GetStartMode">
            <summary>
            Get current start mode setting
            </summary>
            <returns>start mode setting</returns>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.DisplayName">
            <summary>
            This will give us the display name for the 
            Windows Service that we have set in the constructor
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.ToString">
            <summary>
            Override ToString to allow verbose info for this service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.#ctor(System.String)">
            <summary>
            Create this class for the given service.
            </summary>
            <param name="serviceName" />
            The name of the service (don't use the display name!!)
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.Enable(System.Boolean)">
            <summary>
            Can be called to enable the Windows Service
            </summary>
            <param name="auto">set this to true for automatic startup, false for manual</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.Disable">
            <summary>
            Disables the Windows service
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.Start(System.Int32)">
            <summary>
            Start the Windows service.
            </summary>
            <param name="timeOutSec">timeout in seconds</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.Stop(System.Int32)">
            <summary>
            Stop the Windows service
            </summary>
            <param name="timeOutSec">timeout in seconds</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.Restart(System.Int32)">
            <summary>
            Restart the Windows service, a timeout exception will be thrown when the service
            does not stop or start within the timeout time specified.
            </summary>
            <param name="timeOutSec">timeout in seconds</param>
            <returns>true if successful</returns>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.LastErrorCode">
            <summary>
            return the most recent error code encountered or 0 for none.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.Dispose">
            <summary>
            Dispose of this instance
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor.Dispose(System.Boolean)">
            <summary>
            Dispose of this instance if it has not been disposed
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.WindowsServiceMonitor._service">
            <summary>
            The Windows service that is controlled through the .NET ServiceController
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.WTTInterface">
            <summary>
            Class for interfacing with WTT 
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.WTTInterface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.HWSW.Test.Utilities.WTTInterface"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.HWSW.Test.Utilities.XmlTestSettings">
            <summary>
            Class used to access test setting data from an xml file
            Xml files should have testdata as the root node.
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.XmlTestSettings.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.XmlTestSettings.#ctor(System.String)">
            <summary>
            Constructor with device type.  Use this if a specific device type is required for the tests
            </summary>
            <param name="devTypeToUse">the device type string as it appears in the xml file</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.XmlTestSettings.XmlDocLoad(System.String)">
            <summary>
            Load the XML setup file containing the test specific settings
            </summary>
            <param name="fileName">name of the xml file</param>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.XmlTestSettings.GetXmlValue(System.String)">
            <summary>
            Read a string value from the XML setup file.  This will attempt to lookup device-specific
            data first.  It will use the 
            </summary>
            <param name="xmlLabel">the label within the file</param>
            <returns>the value found or string.Empty</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.XmlTestSettings.GetXmlBool(System.String,System.Boolean@)">
            <summary>
            Get a Boolean value from the xml file.
            </summary>
            <param name="xmlLabel">the label within the xml file</param>
            <param name="value">the value found</param>
            <returns>true if a value was found</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.XmlTestSettings.GetXmlInt(System.String,System.Int32@)">
            <summary>
            Get an integer value from the xml file.
            </summary>
            <param name="xmlLabel">the label within the xml file</param>
            <param name="value">the value found</param>
            <returns>true if a value was found</returns>
        </member>
        <member name="M:Microsoft.HWSW.Test.Utilities.XmlTestSettings.GetXmlDouble(System.String,System.Double@)">
            <summary>
            Get a double value from the xml file
            </summary>
            <param name="xmlLabel">the location of the data</param>
            <param name="value">the value found</param>
            <returns>true on success</returns>
        </member>
        <member name="P:Microsoft.HWSW.Test.Utilities.XmlTestSettings.DevType">
            <summary>
            The device type in use or string.empty if it is unknown
            The string identifying the device type in use if one is needed.
            This string should match the section name within the xml file for
            the specific device.
            </summary>
            <remarks>See UEFI_TestDrivenData.xml in UEFI_TestAutomation_Tool for
            an example of the device specific settings format</remarks>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.XmlTestSettings.XmlDoc">
            <summary>
            xml document in use
            </summary>
        </member>
        <member name="F:Microsoft.HWSW.Test.Utilities.XmlTestSettings.devType">
            <summary>
            The string identifying the device type in use if one is needed.
            </summary>
            <see cref="P:Microsoft.HWSW.Test.Utilities.XmlTestSettings.DevType"/>
        </member>
        <member name="T:ExternalPowerControl.ePinColors">
            <summary>
            Arduino port colors to pin number mappings.
            Current Usage:
                Power Button      - uses red/black connectors with fet pin number
                Power Supply      - blue
                USB, EC           - yellow
                Accessory 1       - white
                Docking station   - grey
                Pen               - pin 6
            </summary>
        </member>
        <member name="T:ExternalPowerControl.PinSelections">
            <summary>
            Default Pin selections based on what is connected.
            </summary>
        </member>
        <member name="T:ExternalPowerControl.SerialCommand">
            <summary>
            Base class for serial communications support
            </summary>
        </member>
        <member name="M:ExternalPowerControl.SerialCommand.DoWork">
            <summary>
            Do the work associated with the functionality of this class.
            Subclasses should override this with class-specific code
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:ExternalPowerControl.SerialCommand.#ctor(System.Int32)">
            <summary>
            Serial command constructor
            </summary>
            <param name="comPortNumber">serial COM port number</param>
        </member>
        <member name="M:ExternalPowerControl.SerialCommand.SendCommand(System.String)">
            <summary>
            Send a command via the serial port
            </summary>
            <param name="InputCommand">string containing the command to send</param>
            <returns></returns>
        </member>
        <member name="M:ExternalPowerControl.SerialCommand.WaitForDone">
            <summary>
            Wait for a done reply from the command sent.
            This will wait forever.
            </summary>
            <returns>true when a command is received</returns>
            <remarks>This will throw if an error occurs while accessing the
            serial port.</remarks>
        </member>
        <member name="M:ExternalPowerControl.SerialCommand.WaitForDone(System.Boolean@,System.Int32)">
            <summary>
            Wait until a reply is received from our command request with timeout.
            </summary>
            <param name="returnResult">the reply received</param>
            <param name="timeoutMs">time out in ms. default is 45 seconds</param>
            <returns>true on success, false if communications failed</returns>
        </member>
        <member name="T:ExternalPowerControl.BatchRelayCommand">
            <summary>
            Base class for batch command mode support.
            This allows relays to be changed at a given time instead of immediately.
            </summary>
        </member>
        <member name="M:ExternalPowerControl.BatchRelayCommand.#ctor">
            <summary>
            constructor
            Call Initialize after using this constructor
            </summary>
        </member>
        <member name="M:ExternalPowerControl.BatchRelayCommand.Initialize">
            <summary>
            To be called after constructor, but before the instance is used
            </summary>
            <remarks>This is needed because virtual functions cannot be called in the constructor</remarks>
        </member>
        <member name="T:ExternalPowerControl.DockingStationControl">
            <summary>
            Docking station attach/detach control.  This is using the grey connectors on the
            Arduino automation boxes for the docking station connection as default.
            </summary>
        </member>
        <member name="M:ExternalPowerControl.DockingStationControl.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="comPortNumber">com port for Arduino communications</param>
            <param name="IOPinNumber">Pin to use for docking station on Arduino box (default = grey)</param>
        </member>
        <member name="M:ExternalPowerControl.DockingStationControl.#ctor(System.Int32[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="InputPinArray">array containing arduino pin to use for docking station</param>
            <param name="comPortNumber">com port for arduino communications</param>
        </member>
        <member name="M:ExternalPowerControl.DockingStationControl.ReturnPinArray">
            <summary>
            Get the pin settings for the docking station
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
